openapi: 3.0.3
info:
  title: API for Checkmate app
  version: 0.0.0

tags:
  - name: maintenance
    description: Maintenance operations
  - name: v1/students
    description: Operations related to students
  - name: v1/groups
    description: Operations related to groups
  - name: v1/tests
    description: Operations related to tests
  - name: v1/tests/results
    description: Operations related to test results

paths:
  /ping:
    get:
      tags:
        - maintenance
      summary: Health check endpoint
      operationId: ping
      responses:
        '204':
          description: 'Service is healthy'
  /api/openapi.yaml:
    get:
      tags:
        - maintenance
      summary: Get OpenAPI specification
      operationId: getOpenAPISpec
      responses:
        '200':
          description: 'OpenAPI specification in YAML format'
  /api/v1/students:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - v1/students
      summary: Get list of students
      operationId: getStudents
      responses:
        '200':
          description: 'List of students'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Student'
        '401':
          description: 'Authentication was not successful'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
    post:
      security:
        - bearerAuth: [ ]
      tags:
        - v1/students
      summary: Create a new student
      requestBody:
        description: Student to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateStudentReq'
      responses:
        '201':
          description: 'Student created successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'
        '400':
          description: 'Invalid input data'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '401':
          description: 'Authentication was not successful'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
  /api/v1/students/{student_id}:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - v1/students
      summary: Get a student by ID
      parameters:
        - $ref: '#/components/parameters/StudentId'
      responses:
        '200':
          description: 'Student details'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'
        '400':
          description: 'Invalid student ID'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '401':
          description: 'Authentication was not successful'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: 'You do not have permission to access this student'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: 'Student not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
    patch:
      security:
        - bearerAuth: [ ]
      tags:
        - v1/students
      summary: Update a student by ID
      parameters:
        - $ref: '#/components/parameters/StudentId'
      requestBody:
        description: Student fields to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateStudentReq'
      responses:
        '200':
          description: 'Student updated successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'
        '400':
          description: 'Invalid input data or student ID'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '401':
          description: 'Authentication was not successful'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: 'You do not have permission to update this student'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: 'Student not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
    delete:
      security:
        - bearerAuth: [ ]
      tags:
        - v1/students
      summary: Delete a student by ID
      parameters:
        - $ref: '#/components/parameters/StudentId'
      responses:
        '204':
          description: 'Student deleted successfully'
        '400':
          description: 'Invalid student ID'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '401':
          description: 'Authentication was not successful'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: 'You do not have permission to delete this student'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: 'Student not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'

  /api/v1/groups:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - v1/groups
      summary: Get list of groups
      responses:
        '200':
          description: 'List of groups'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Group'
        '401':
          description: 'Authentication was not successful'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
    post:
      security:
        - bearerAuth: [ ]
      tags:
        - v1/groups
      summary: Create a new group
      requestBody:
        description: Group to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateGroupReq'
      responses:
        '201':
          description: 'Group created successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        '400':
          description: 'Invalid input data'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '401':
          description: 'Authentication was not successful'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
  /api/v1/groups/{group_id}:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - v1/groups
      summary: Get a group by ID
      parameters:
        - $ref: '#/components/parameters/GroupId'
      responses:
        '200':
          description: 'Group details'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        '400':
          description: 'Invalid group ID'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '401':
          description: 'Authentication was not successful'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: 'You do not have permission to access this group'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: 'Group not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
    patch:
      security:
        - bearerAuth: [ ]
      tags:
        - v1/groups
      summary: Update a group by ID
      parameters:
        - $ref: '#/components/parameters/GroupId'
      requestBody:
        description: Group fields to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateGroupReq'
      responses:
        '200':
          description: 'Group updated successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        '400':
          description: 'Invalid input data or group ID'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '401':
          description: 'Authentication was not successful'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: 'You do not have permission to update this group'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: 'Group not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
    delete:
      security:
        - bearerAuth: [ ]
      tags:
        - v1/groups
      summary: Delete a group by ID
      parameters:
        - $ref: '#/components/parameters/GroupId'
      responses:
        '204':
          description: 'Group deleted successfully'
        '400':
          description: 'Invalid group ID'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '401':
          description: 'Authentication was not successful'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: 'You do not have permission to delete this group'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: 'Group not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
  /api/v1/tests:
    get:
      security:
          - bearerAuth: [ ]
      tags:
          - v1/tests
      summary: Get list of tests
      parameters:
        - $ref: '#/components/parameters/GroupIdFilter'
        - $ref: '#/components/parameters/CreatedFromFilter'
        - $ref: '#/components/parameters/CreatedToFilter'
      responses:
          '200':
            description: 'List of tests'
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/Test'
          '401':
            description: 'Authentication was not successful'
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/UnauthorizedError'
    post:
        security:
            - bearerAuth: [ ]
        tags:
            - v1/tests
        summary: Create a new test
        requestBody:
            description: Test to create
            required: true
            content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/CreateTestReq'
        responses:
            '201':
                description: 'Test created successfully'
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/Test'
            '400':
                description: 'Invalid input data'
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/BadRequestError'
            '401':
                description: 'Authentication was not successful'
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/UnauthorizedError'
            '403':
                description: 'Cannot create test for the specified group'
                content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/ForbiddenError'
  /api/v1/tests/debug:
    post:
      security:
          - bearerAuth: [ ]
      tags:
          - v1/tests
      summary: Calls the AI model directly and returns the generated test without saving it to the database.
      requestBody:
        description: Test parameters for generating a test
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestParamsDebug'
      responses:
        '200':
          description: 'Generated test'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TestItem'
        '400':
          description: 'Invalid input data'
          content:
              application/json:
                schema:
                  $ref: '#/components/schemas/BadRequestError'
        '401':
          description: 'Authentication was not successful'
          content:
              application/json:
                schema:
                  $ref: '#/components/schemas/UnauthorizedError'
  /api/v1/tests/{test_id}/complete:
    post:
      security:
          - bearerAuth: [ ]
      tags:
          - v1/tests
      summary: Complete a test, after this user cannot change the test questions anymore.
      parameters:
          - $ref: '#/components/parameters/TestId'
      responses:
        '204':
          description: 'Test completed successfully'
        '400':
          description: 'Invalid test ID or test is already completed'
          content:
              application/json:
                schema:
                  $ref: '#/components/schemas/BadRequestError'
        '401':
          description: 'Authentication was not successful'
          content:
              application/json:
                schema:
                  $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: 'You do not have permission to complete this test'
          content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: 'Test not found'
          content:
              application/json:
                schema:
                  $ref: '#/components/schemas/NotFoundError'
  /api/v1/tests/{test_id}:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - v1/tests
      summary: Get a test by ID
      parameters:
        - $ref: '#/components/parameters/TestId'
      responses:
        '200':
          description: 'Test details'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Test'
        '400':
          description: 'Invalid test ID'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '401':
          description: 'Authentication was not successful'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: 'You do not have permission to access this test'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: 'Test not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
    patch:
      security:
          - bearerAuth: [ ]
      tags:
          - v1/tests
      summary: Update a test by ID
      parameters:
          - $ref: '#/components/parameters/TestId'
      requestBody:
        description: Test fields to update
        required: true
        content:
            application/json:
                schema:
                  $ref: '#/components/schemas/UpdateTestReq'
      responses:
        '200':
          description: 'Test updated successfully'
          content:
            application/json:
                schema:
                  $ref: '#/components/schemas/Test'
        '400':
          description: 'Invalid input data or test ID'
          content:
            application/json:
                schema:
                  $ref: '#/components/schemas/BadRequestError'
        '401':
          description: 'Authentication was not successful'
          content:
              application/json:
                schema:
                  $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: 'You do not have permission to update this test'
          content:
              application/json:
                  schema:
                    $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: 'Test not found'
          content:
              application/json:
                schema:
                  $ref: '#/components/schemas/NotFoundError'
    delete:
      security:
          - bearerAuth: [ ]
      tags:
          - v1/tests
      summary: Delete a test by ID
      parameters:
          - $ref: '#/components/parameters/TestId'
      responses:
        '204':
          description: 'Test deleted successfully'
        '400':
          description: 'Invalid test ID'
          content:
              application/json:
                schema:
                  $ref: '#/components/schemas/BadRequestError'
        '401':
          description: 'Authentication was not successful'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: 'You do not have permission to delete this test'
          content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: 'Test not found'
          content:
              application/json:
                schema:
                  $ref: '#/components/schemas/NotFoundError'
  /api/v1/tests/results:
    get:
      security:
          - bearerAuth: [ ]
      tags:
          - v1/tests/results
      summary: Get test results
      parameters:
          - $ref: '#/components/parameters/TestIdFilter'
      responses:
          '200':
            description: 'List of test results'
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/TestResult'
          '400':
            description: 'Invalid test ID'
            content:
              application/json:
                  schema:
                    $ref: '#/components/schemas/BadRequestError'
          '401':
            description: 'Authentication was not successful'
            content:
              application/json:
                  schema:
                    $ref: '#/components/schemas/UnauthorizedError'
          '403':
            description: 'You do not have permission to access results for this test'
            content:
              application/json:
                  schema:
                    $ref: '#/components/schemas/ForbiddenError'
          '404':
            description: 'Test not found'
            content:
              application/json:
                  schema:
                    $ref: '#/components/schemas/NotFoundError'
  /api/v1/tests/{test_id}/results:
    post:
      security:
          - bearerAuth: [ ]
      tags:
          - v1/tests/results
      summary: Upload test result for specific test. Optionally you can specify student id.
      parameters:
          - $ref: '#/components/parameters/TestId'
      requestBody:
        description: Request to get presigned URL for uploading test result
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                student_id:
                  type: string
                  format: uuid
      responses:
        '200':
          description: 'Returns the presigned URL for uploading the files'
          content:
            application/json:
              schema:
                type: object
                properties:
                  upload_url:
                    type: string
                    format: uri
                    example: "https://s3.amazonaws.com/your-bucket/presigned-url"
        '400':
          description: 'Invalid test ID'
          content:
              application/json:
                schema:
                  $ref: '#/components/schemas/BadRequestError'
        '401':
          description: 'Authentication was not successful'
          content:
              application/json:
                schema:
                  $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: 'You do not have permission to submit results for this test'
          content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: 'Test not found'
          content:
              application/json:
                schema:
                  $ref: '#/components/schemas/NotFoundError'
  /api/v1/tests/{test_id}/results/bulk:
    post:
        security:
            - bearerAuth: [ ]
        tags:
            - v1/tests/results
        summary: Upload multiple test results.
        parameters:
          - $ref: '#/components/parameters/TestId'
        requestBody:
          description: Request to get presigned URL for uploading multiple test results
          content:
              application/json:
                schema:
                  type: object
                  properties:
                    number_of_files:
                      type: integer
                      example: 3
                  required:
                  - number_of_files
        responses:
            '200':
              description: 'Returns the presigned URL for uploading the files'
              content:
                application/json:
                  schema:
                    type: object
                    properties:
                      upload_urls:
                        type: array
                        items:
                          type: string
                          format: uri
                        example:
                          - "https://s3.amazonaws.com/your-bucket/presigned-url-1"
                          - "https://s3.amazonaws.com/your-bucket/presigned-url-2"
            '400':
              description: 'Invalid test ID'
              content:
                application/json:
                    schema:
                      $ref: '#/components/schemas/BadRequestError'
            '401':
              description: 'Authentication was not successful'
              content:
                application/json:
                    schema:
                      $ref: '#/components/schemas/UnauthorizedError'
            '403':
              description: 'You do not have permission to submit results for this test'
              content:
                application/json:
                    schema:
                      $ref: '#/components/schemas/ForbiddenError'
            '404':
              description: 'Test not found'
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/NotFoundError'
  /api/v1/tests/{test_id}/results/evaluate:
    post:
      security:
          - bearerAuth: [ ]
      tags:
          - v1/tests/results
      summary: Trigger OMR evaluation of all uploaded test files for this test.
      description: |
        Scans S3 for uploaded test photos under the test_id directory and processes them using Optical Mark Recognition (OMR) to automatically:
        - Download each uploaded image file from S3
        - Detect student IDs from the ID grid on test sheets  
        - Extract answers from multiple choice bubbles
        - Grade against the test answer key
        - Create new test_results records in the database
        
        The evaluation processes all image files found in S3 under the test_id prefix and runs synchronously.
      parameters:
          - $ref: '#/components/parameters/TestId'
      responses:
        '200':
          description: 'OMR evaluation completed successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OMREvaluationResponse'
        '400':
          description: 'Invalid test ID'
          content:
              application/json:
                schema:
                  $ref: '#/components/schemas/BadRequestError'
        '401':
          description: 'Authentication was not successful'
          content:
              application/json:
                schema:
                  $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: 'You do not have permission to evaluate results for this test'
          content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: 'Test not found'
          content:
              application/json:
                schema:
                  $ref: '#/components/schemas/NotFoundError'
        '500':
          description: 'OMR evaluation failed or internal server error'
          content:
              application/json:
                schema:
                  $ref: '#/components/schemas/InternalServerError'
  /api/v1/tests/{test_id}/results/{result_id}:
    get:
      security:
          - bearerAuth: [ ]
      tags:
          - v1/tests/results
      summary: Get a specific test result by ID
      parameters:
          - $ref: '#/components/parameters/TestId'
          - $ref: '#/components/parameters/TestResultId'
      responses:
          '200':
              description: 'Test result details'
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/TestResult'
          '400':
              description: 'Invalid test ID or result ID'
              content:
                application/json:
                  schema:
                      $ref: '#/components/schemas/BadRequestError'
          '401':
              description: 'Authentication was not successful'
              content:
                application/json:
                  schema:
                      $ref: '#/components/schemas/UnauthorizedError'
          '403':
              description: 'You do not have permission to access this test result'
              content:
                application/json:
                  schema:
                      $ref: '#/components/schemas/ForbiddenError'
          '404':
              description: 'Test or result not found'
              content:
                application/json:
                  schema:
                      $ref: '#/components/schemas/NotFoundError'
    delete:
      security:
          - bearerAuth: [ ]
      tags:
          - v1/tests/results
      summary: Delete a specific test result by ID
      parameters:
          - $ref: '#/components/parameters/TestId'
          - $ref: '#/components/parameters/TestResultId'
      responses:
          '204':
              description: 'Test result deleted successfully'
          '400':
              description: 'Invalid test ID or result ID'
              content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/BadRequestError'
          '401':
              description: 'Authentication was not successful'
              content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/UnauthorizedError'
          '403':
              description: 'You do not have permission to delete this test result'
              content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/ForbiddenError'
          '404':
              description: 'Test or result not found'
              content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/NotFoundError'
components:
  schemas:
    CreateStudentReq:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
          format: email
      required:
        - name
        - email
    UpdateStudentReq:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
          format: email
    Student:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        email:
          type: string
          format: email
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - id
        - name
        - email
        - created_at
        - updated_at
    CreateGroupReq:
      type: object
      properties:
        name:
          type: string
        student_ids:
            type: array
            items:
              type: string
              format: uuid
      required:
        - name
        - student_ids
    UpdateGroupReq:
      type: object
      properties:
        name:
          type: string
        student_ids:
          type : array
          items:
            type: string
            format: uuid
    Group:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        student_ids:
          type: array
          items:
            type: string
            format: uuid
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - id
        - name
        - created_at
        - updated_at
    CreateTestReq:
      type: object
      properties:
        group_id:
          type: string
          format: uuid
        name:
          type: string
          example: "Past simple"
        description:
          type: string
          example: "Quick test on monday to test past simple"
        scheduled_at:
          type: string 
          format: date-time
        test_params:
            $ref: '#/components/schemas/TestParams'
      required:
        - group_id
        - name
        - scheduled_at
        - test_params
    UpdateTestReq:
      type: object
      properties:
          name:
            type: string
            example: "Past simple"
          description:
            type: string
            example: "Quick test on monday to test past simple"
          scheduled_at:
            type: string
            format: date-time
          content:
            type: array
            items:
              $ref: '#/components/schemas/TestItem'

    Test:
      type: object
      properties:
        id:
          type: string
          format: uuid
        group_id:
          type: string
          format: uuid
        status:
          type: string
          enum:
            - draft
            - generated
            - completed
        name:
          type: string
          example: "Past simple"
        description:
          type: string
          example: "Quick test on monday to test past simple"
        scheduled_at:
          type: string
          format: date-time
        test_params:
            $ref: '#/components/schemas/TestParams'
        content:
          type: array
          items:
              $ref: '#/components/schemas/TestItem'
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - id
        - group_id
        - status
        - name
        - schedulated_at
        - test_params
        - created_at
        - updated_at
    TestParams:
      type: object
      properties:
        subject:
          type: string
        topic:
          type: string
        student_age_range:
          type: string
        difficulty_level:
          type: string
        question_format:
          type: string
          enum:
            - multiple_choice
            - single_choice
        number_of_questions:
          type: integer
        time_per_question_in_minutes:
          type: integer
      required:
        - subject
        - topic
        - student_age_range
        - difficulty_level
        - question_format
        - number_of_questions
        - time_per_question_in_minutes
    TestParamsDebug:
      allOf:
        - $ref: '#/components/schemas/TestParams'
        - type: object
          properties:
            max_tokens:
              type: integer
            temperature:
              type: number
              format: double
              minimum: 0.0
              exclusiveMaximum: true
              maximum: 1.0
            top_p:
              type: number
              format: double
              minimum: 0.0
              exclusiveMaximum: true
              maximum: 1.0
    TestItem:
      type: object
      properties:
        q:
          type: integer
          minimum: 1
        question:
          type: string
          example: "What animals lives in the water?"
        options:
          type: array
          items:
            $ref: '#/components/schemas/TestItemOptions'
      required:
        - q
        - question
        - options
    TestItemOptions:
      type: object
      description: Multiple-choice options labeled A–D
      properties:
        order:
          type: integer
          example: 0
        answer:
          type: string
          example: "Whale"
        correct:
          type: boolean
          example: true
      required:
        - order
        - answer
        - correct
    TestResult:
      type: object
      properties:
        id:
          type: string
          format: uuid
        student_id:
          type: string
          format: uuid
        student_name:
          type: string
        status:
          type: string
          enum:
            - pending
            - failed
            - evaluated
            - pending_assignment
        correct_answers:
          type: integer
        wrong_answers:
          type: integer
        original_file_url:
          type: string
          format: url
          example: https://my-bucket-name.s3.us-west-2.amazonaws.com/photos/image1.jpg
        evaluated_file_url:
          type: string
          format: url
          example: https://my-bucket-name.s3.us-west-2.amazonaws.com/photos/image1.jpg
      required:
      - id
      - status

    OMREvaluationResponse:
      type: object
      properties:
        message:
          type: string
          example: "OMR evaluation completed successfully"
        test_id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        processed_files:
          type: integer
          description: "Number of image files found and processed from S3"
          example: 25
        successful_evaluations:
          type: integer
          description: "Number of successfully processed OMR evaluations"
          example: 23
        failed_evaluations:
          type: integer
          description: "Number of failed OMR evaluations"
          example: 2
        evaluation_details:
          type: array
          items:
            $ref: '#/components/schemas/OMREvaluationDetail'
      required:
        - message
        - test_id
        - processed_files
        - successful_evaluations
        - failed_evaluations
        - evaluation_details

    OMREvaluationDetail:
      type: object
      properties:
        file_key:
          type: string
          description: "S3 key of the processed file"
          example: "123e4567-e89b-12d3-a456-426614174000/student_photo_001.jpg"
        detected_student_id:
          type: string
          description: "Student ID detected from the OMR grid"
          example: "25"
          nullable: true
        success:
          type: boolean
          description: "Whether OMR evaluation was successful"
        student_id_confidence:
          type: number
          format: float
          description: "Confidence score for student ID detection (0-1)"
          example: 0.98
        correct_answers_count:
          type: integer
          description: "Number of correct answers detected"
          example: 18
        total_questions:
          type: integer
          description: "Total number of questions in the test"
          example: 20
        percentage:
          type: number
          format: float
          description: "Test score as percentage"
          example: 90.0
        pipeline_quality:
          type: number
          format: float
          description: "Overall OMR pipeline quality score (0-1)"
          example: 0.95
        processing_time:
          type: number
          format: float
          description: "Processing time in seconds"
          example: 3.24
        error:
          type: string
          description: "Error message if evaluation failed"
          example: "OMR processing failed: Template alignment failed"
      required:
        - file_key
        - success

    ## Errors
    UnauthorizedError:
      type: object
      properties:
        errorCode:
          type: string
          example: '401'
        errorMessage:
          type: string
          example: 'JWT token is missing or invalid.'
    BadRequestError:
      type: object
      properties:
        errorCode:
          type: string
          example: '400'
        errorMessage:
          type: string
          example: 'Invalid input data.'
    ForbiddenError:
      type: object
      properties:
        errorCode:
          type: string
          example: '403'
        errorMessage:
          type: string
          example: 'You do not have permission to access this resource.'
    NotFoundError:
      type: object
      properties:
        errorCode:
          type: string
          example: '404'
        errorMessage:
          type: string
          example: 'Resource not found.'
    InternalServerError:
      type: object
      properties:
        errorCode:
          type: string
          example: '500'
        errorMessage:
          type: string
          example: 'Internal server error occurred during processing.'
  parameters:
    StudentId:
      name: student_id
      in: path
      description: UUID of the student
      required: true
      schema:
        type: string
        format: uuid
    GroupId:
      name: group_id
      in: path
      description: UUID of the group
      required: true
      schema:
        type: string
        format: uuid
    TestId:
      name: test_id
      in: path
      description: UUID of the test
      required: true
      schema:
        type: string
        format: uuid
    TestResultId:
      name: result_id
      in: path
      description: UUID of the test result
      required: true
      schema:
        type: string
        format: uuid
    GroupIdFilter:
      name: group_id_filter
      in: query
      description: UUID of the group filter
      required: false
      schema:
          type: string
          format: uuid
    CreatedFromFilter:
      name: created_from_filter
      in: query
      description: Filter results created from this date (inclusive)
      required: false
      schema:
          type: string
          format: date-time
    CreatedToFilter:
      name: created_to_filter
      in: query
      description: Filter results created up to this date (inclusive)
      required: false
      schema:
          type: string
          format: date-time
    TestIdFilter:
      name: test_id_filter
      in: query
      description: UUID of the test filter
      required: false
      schema:
          type: string
          format: uuid
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
